{"version":3,"sources":["types.js","components/TodoList/TodoList.jsx","helpers.js","components/CurrentUser/CurrentUser.jsx","api.js","App.jsx","index.js"],"names":["TypeTodo","PropTypes","shape","id","number","isRequired","completed","bool","title","string","userId","TodoList","React","memo","randomize","checkTodo","todos","status","selectUser","filterTodos","searchTodos","searchValue","className","type","placeholder","value","onChange","name","onClick","map","todo","key","ClassNames","checked","propTypes","arrayOf","func","defaultProps","request","url","options","fetch","then","response","json","CurrentUser","state","user","clearUser","setState","this","loadData","prevProps","props","data","email","phone","Component","App","selectedUserId","query","isRandom","onSearchChange","e","target","toLowerCase","onSelectChange","onCheckChange","todoId","prevState","onRandomize","todosOnPage","filter","includes","sort","Math","random","statu","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.625e95af.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const TypeTodo = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool,\n  title: PropTypes.string,\n  userId: PropTypes.number,\n});\n","import React from 'react';\nimport './TodoList.scss';\nimport ClassNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TypeTodo } from '../../types';\n\nexport const TodoList = React.memo(({\n  randomize,\n  checkTodo,\n  todos,\n  status,\n  selectUser,\n  filterTodos,\n  searchTodos,\n  searchValue,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <form>\n      <input\n        id=\"search-query\"\n        type=\"text\"\n        placeholder=\"search\"\n        value={searchValue}\n        onChange={searchTodos}\n      />\n\n      <select\n        name=\"status\"\n        value={status}\n        onChange={filterTodos}\n      >\n        <option value={null}>Select option filter</option>\n        <option value=\"\">all</option>\n        <option value=\"active\">active</option>\n        <option value=\"completed\">completed</option>\n      </select>\n    </form>\n    <button type=\"button\" onClick={randomize}>\n      Randomize / Stop randomizing\n    </button>\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={ClassNames(\n              'TodoList__item',\n              { 'TodoList__item--unchecked': !todo.completed },\n              { 'TodoList__item--checked': todo.completed },\n            )}\n          >\n            <label>\n              <input\n                checked={todo.completed}\n                type=\"checkbox\"\n                onChange={() => {\n                  checkTodo(todo.id);\n                }}\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              onClick={() => {\n                selectUser(todo.userId);\n              }}\n              className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n              type=\"button\"\n            >\n              User&nbsp;\n              {todo.userId}\n            </button>\n\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n));\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(TypeTodo).isRequired,\n  randomize: PropTypes.func.isRequired,\n  checkTodo: PropTypes.func.isRequired,\n  status: PropTypes.string,\n  selectUser: PropTypes.func.isRequired,\n  filterTodos: PropTypes.func.isRequired,\n  searchTodos: PropTypes.func.isRequired,\n  searchValue: PropTypes.string,\n};\n\nTodoList.defaultProps = {\n  status: 'all',\n  searchValue: '',\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then(response => response.json());\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUserById } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  clearUser = () => {\n    this.setState({ user: null });\n  }\n\n  async loadData() {\n    const user = await getUserById(this.props.userId);\n\n    this.setState({ user: user.data });\n  }\n\n  render() {\n    if (this.state.user) {\n      const { user: { id, name, email, phone } } = this.state;\n\n      return (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{name}</h3>\n          <p className=\"CurrentUser__email\">{email}</p>\n          <p className=\"CurrentUser__phone\">{phone}</p>\n\n          <button\n            type=\"button\"\n            onClick={this.clearUser}\n          >\n            Clear\n          </button>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        User is not selected\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n};\n","import { request } from './helpers';\n\nexport const getTodos = () => request('/todos');\nexport const getUserById = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    query: '',\n    status: 'all',\n    isRandom: false,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos: todos.data });\n  }\n\n  selectUser = (selectedUserId) => {\n    this.setState({ selectedUserId });\n  }\n\n  onSearchChange = (e) => {\n    const { value } = e.target;\n\n    this.setState({ query: value.toLowerCase() });\n  }\n\n  onSelectChange = (e) => {\n    const { name, value } = e.target;\n\n    this.setState({ [name]: value });\n  }\n\n  onCheckChange = (todoId) => {\n    this.setState(prevState => ({\n      todos: [\n        ...prevState.todos.map(todo => (todo.id === todoId\n          ? {\n            ...todo, completed: !todo.completed,\n          }\n          : todo)),\n      ],\n    }));\n  }\n\n  onRandomize = () => {\n    this.setState(prevState => ({\n      isRandom: !prevState.isRandom,\n    }));\n  }\n\n  render() {\n    const {\n      isRandom,\n      todos,\n      selectedUserId,\n      query,\n      status,\n    } = this.state;\n\n    let todosOnPage = todos\n      .filter(todo => todo\n        && todo.title\n        && todo.title.includes(query));\n\n    if (status === 'active') {\n      todosOnPage = todosOnPage.filter(todo => !todo.completed);\n    } else if (status === 'completed') {\n      todosOnPage = todosOnPage.filter(todo => todo.completed);\n    }\n\n    if (isRandom) {\n      todosOnPage.sort(() => Math.random() - 0.5);\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            randomize={this.onRandomize}\n            todos={todosOnPage}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n            searchTodos={this.onSearchChange}\n            filterTodos={this.onSelectChange}\n            searchValue={query}\n            statu={status}\n            checkTodo={this.onCheckChange}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId !== 0 ? (\n              <CurrentUser userId={selectedUserId} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}