{"version":3,"sources":["helpers.js","components/CurrentUser/CurrentUser.jsx","api.js","types.js","components/TodoList/TodoList.jsx","App.jsx","index.js"],"names":["request","url","options","fetch","then","response","json","CurrentUser","state","user","clearUser","setState","this","loadData","prevProps","userId","props","data","id","name","email","phone","className","type","onClick","React","Component","TypeTodo","PropTypes","shape","number","isRequired","completed","bool","title","string","TodoList","memo","randomize","checkTodo","todos","status","selectUser","filterTodos","searchTodos","searchValue","placeholder","value","onChange","disabled","map","todo","key","ClassNames","checked","propTypes","arrayOf","func","defaultProps","App","selectedUserId","query","isRandom","onSearchChange","e","target","toLowerCase","onSelectChange","onCheckChange","todoId","prevState","onRandomize","todosOnPage","filter","includes","sort","Math","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db0c1fc8.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then(response => response.json());\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUserById } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  clearUser = () => {\n    this.setState({ user: null });\n  }\n\n  async loadData() {\n    const user = await getUserById(this.props.userId);\n\n    this.setState({ user: user.data });\n  }\n\n  render() {\n    if (this.state.user) {\n      const { user: { id, name, email, phone } } = this.state;\n\n      return (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{name}</h3>\n          <p className=\"CurrentUser__email\">{email}</p>\n          <p className=\"CurrentUser__phone\">{phone}</p>\n\n          <button\n            type=\"button\"\n            onClick={this.clearUser}\n          >\n            Clear\n          </button>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        User is not selected\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n};\n","import { request } from './helpers';\n\nexport const getTodos = () => request('/todos');\nexport const getUserById = userId => request(`/users/${userId}`);\n","import PropTypes from 'prop-types';\n\nexport const TypeTodo = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool,\n  title: PropTypes.string,\n  userId: PropTypes.number,\n});\n","import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\nimport { TypeTodo } from '../../types';\n\nexport const TodoList = React.memo(({\n  randomize,\n  checkTodo,\n  todos,\n  status,\n  selectUser,\n  filterTodos,\n  searchTodos,\n  searchValue,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <form>\n      <input\n        id=\"search-query\"\n        type=\"text\"\n        placeholder=\"search\"\n        value={searchValue}\n        onChange={searchTodos}\n      />\n\n      <select\n        name=\"status\"\n        value={status}\n        onChange={filterTodos}\n      >\n        <option disabled>Select an option</option>\n        <option value=\"all\">all</option>\n        <option value=\"active\">active</option>\n        <option value=\"completed\">completed</option>\n      </select>\n    </form>\n    <button type=\"button\" onClick={randomize}>\n      Randomize / Stop randomizing\n    </button>\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={ClassNames(\n              'TodoList__item',\n              { 'TodoList__item--unchecked': !todo.completed },\n              { 'TodoList__item--checked': todo.completed },\n            )}\n          >\n            <label>\n              <input\n                checked={todo.completed}\n                type=\"checkbox\"\n                onChange={() => {\n                  checkTodo(todo.id);\n                }}\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              onClick={() => {\n                selectUser(todo.userId);\n              }}\n              className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n              type=\"button\"\n            >\n              User&nbsp;\n              {todo.userId}\n            </button>\n\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n));\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(TypeTodo).isRequired,\n  randomize: PropTypes.func.isRequired,\n  checkTodo: PropTypes.func.isRequired,\n  status: PropTypes.string,\n  selectUser: PropTypes.func.isRequired,\n  filterTodos: PropTypes.func.isRequired,\n  searchTodos: PropTypes.func.isRequired,\n  searchValue: PropTypes.string,\n};\n\nTodoList.defaultProps = {\n  status: 'all',\n  searchValue: '',\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { CurrentUser } from './components/CurrentUser';\nimport { TodoList } from './components/TodoList';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    query: '',\n    status: '',\n    isRandom: false,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos: todos.data });\n  }\n\n  selectUser = (selectedUserId) => {\n    this.setState({ selectedUserId });\n  }\n\n  onSearchChange = (e) => {\n    const { value } = e.target;\n\n    this.setState({ query: value.toLowerCase() });\n  }\n\n  onSelectChange = (e) => {\n    const { name, value } = e.target;\n\n    this.setState({ [name]: value });\n  }\n\n  onCheckChange = (todoId) => {\n    this.setState(prevState => ({\n      todos: [\n        ...prevState.todos.map(todo => (todo.id === todoId\n          ? {\n            ...todo, completed: !todo.completed,\n          }\n          : todo)),\n      ],\n    }));\n  }\n\n  onRandomize = () => {\n    this.setState(prevState => ({\n      isRandom: !prevState.isRandom,\n    }));\n  }\n\n  render() {\n    const {\n      isRandom,\n      todos,\n      selectedUserId,\n      query,\n      status,\n    } = this.state;\n\n    let todosOnPage = todos\n      .filter(todo => todo\n        && todo.title\n        && todo.title.includes(query));\n\n    if (status === 'active') {\n      todosOnPage = todosOnPage.filter(todo => !todo.completed);\n    } else if (status === 'completed') {\n      todosOnPage = todosOnPage.filter(todo => todo.completed);\n    }\n\n    if (isRandom) {\n      todosOnPage.sort(() => Math.random() - 0.5);\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            randomize={this.onRandomize}\n            todos={todosOnPage}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n            searchTodos={this.onSearchChange}\n            filterTodos={this.onSelectChange}\n            searchValue={query}\n            status={status}\n            checkTodo={this.onCheckChange}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId !== 0 ? (\n              <CurrentUser userId={selectedUserId} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}